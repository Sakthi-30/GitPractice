USE ADVANCEDJOINS

SELECT * FROM CUSTOMERS
SELECT * FROM ORDERS
SELECT * FROM PRODUCTS
SELECT * FROM ORDERDETAILS

--1.Join with Subquery
SELECT CUSTOMERS.CUSTOMERNAME, SUM(ORDERS.ORDERAMOUNT) AS TOTAL_ORDER_AMOUNT
FROM CUSTOMERS
INNER JOIN ORDERS ON CUSTOMERS.CUSTOMERID = ORDERS.CUSTOMERID
WHERE ORDERS.ORDERAMOUNT > (SELECT AVG(ORDERAMOUNT) FROM ORDERS)
GROUP BY CUSTOMERS.CUSTOMERNAME;

--2.Self Join to Find Duplicate Orders
SELECT O1.ORDERID AS OrderID_1, O2.ORDERID AS OrderID_2, O1.ORDERAMOUNT, O1.ORDERDATE
FROM ORDERS O1
INNER JOIN ORDERS O2
ON O1.ORDERAMOUNT = O2.ORDERAMOUNT
AND O1.ORDERDATE = O2.ORDERDATE
AND O1.ORDERID <> O2.ORDERID;

--3.Three-Table Join with Aggregation
SELECT CUSTOMERS.CUSTOMERNAME, SUM(ORDERDETAILS.QUANTITY) AS TOTAL_QUANTITY_ORDERED
FROM CUSTOMERS
INNER JOIN ORDERS ON CUSTOMERS.CUSTOMERID = ORDERS.CUSTOMERID
INNER JOIN ORDERDETAILS ON ORDERS.ORDERID = ORDERDETAILS.ORDERID
GROUP BY CUSTOMERS.CUSTOMERNAME;

--4.Left Join with Non-Matching Rows Filter
SELECT PRODUCTS.ProductID, PRODUCTS.ProductName
FROM PRODUCTS
LEFT JOIN ORDERDETAILS ON PRODUCTS.ProductID = ORDERDETAILS.ProductID
WHERE ORDERDETAILS.OrderID IS NULL;

--5.Join with Multiple Conditions
SELECT ORDERS.ORDERID, ORDERS.ORDERDATE, ORDERS.ORDERAMOUNT
FROM ORDERS
INNER JOIN ORDERDETAILS ON ORDERS.ORDERID = ORDERDETAILS.ORDERID
INNER JOIN PRODUCTS ON ORDERDETAILS.PRODUCTID = PRODUCTS.ProductID
WHERE PRODUCTS.Price > 500
AND ORDERS.ORDERAMOUNT > 200;

--6.Conditional Join
SELECT CUSTOMERS.CUSTOMERNAME, ORDERS.ORDERID, ORDERS.ORDERAMOUNT, ORDERS.ORDERDATE
FROM CUSTOMERS
INNER JOIN ORDERS ON CUSTOMERS.CUSTOMERID = ORDERS.CUSTOMERID
INNER JOIN ORDERDETAILS ON ORDERS.ORDERID = ORDERDETAILS.ORDERID
WHERE (CUSTOMERS.CITY = 'New York' AND ORDERS.ORDERAMOUNT > 250)
OR (CUSTOMERS.CITY != 'New York');

SELECT * FROM CUSTOMERS
SELECT * FROM ORDERDETAILS
SELECT * FROM ORDERS
SELECT * FROM PRODUCTS

--7.Complex Join with COALESCE
SELECT CUSTOMERS.CUSTOMERNAME, COALESCE(ORDERS.ORDERAMOUNT, 0) AS ORDERAMOUNT
FROM CUSTOMERS
LEFT JOIN ORDERS ON CUSTOMERS.CUSTOMERID = ORDERS.CUSTOMERID;

--8.Join with Window Functions
WITH RankedOrders AS (
    SELECT 
        CUSTOMERS.CUSTOMERNAME, 
        ORDERS.ORDERID, 
        ORDERS.ORDERDATE, 
        ORDERS.ORDERAMOUNT,
        ROW_NUMBER() OVER (PARTITION BY ORDERS.CUSTOMERID ORDER BY ORDERS.ORDERDATE DESC) AS RowNum
    FROM CUSTOMERS
    INNER JOIN ORDERS ON CUSTOMERS.CUSTOMERID = ORDERS.CUSTOMERID
)
SELECT CUSTOMERNAME, ORDERID, ORDERDATE, ORDERAMOUNT
FROM RankedOrders
WHERE RowNum <= 3
ORDER BY CUSTOMERNAME, RowNum;

--9.Join with CASE Statements
SELECT 
    CUSTOMERS.CUSTOMERNAME, 
    ORDERS.ORDERID, 
    ORDERS.ORDERAMOUNT,
    CASE
        WHEN ORDERS.ORDERAMOUNT > 300 THEN 'High Value'
        WHEN ORDERS.ORDERAMOUNT BETWEEN 100 AND 300 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS OrderValue
FROM CUSTOMERS
INNER JOIN ORDERS ON CUSTOMERS.CUSTOMERID = ORDERS.CUSTOMERID;


--10.Three-Way Join with Conditional Aggregation
SELECT 
    CUSTOMERS.CUSTOMERNAME,
    SUM(CASE WHEN ORDERS.ORDERAMOUNT > 300 THEN ORDERS.ORDERAMOUNT ELSE 0 END) AS TotalOver300,
    SUM(CASE WHEN ORDERS.ORDERAMOUNT <= 300 THEN ORDERS.ORDERAMOUNT ELSE 0 END) AS TotalUnderOrEqual300
FROM CUSTOMERS
LEFT JOIN ORDERS ON CUSTOMERS.CUSTOMERID = ORDERS.CUSTOMERID
GROUP BY CUSTOMERS.CUSTOMERNAME;

--11.Join with EXISTS Clause
SELECT DISTINCT CUSTOMERS.CUSTOMERNAME
FROM CUSTOMERS
JOIN ORDERS ON CUSTOMERS.CUSTOMERID = ORDERS.CUSTOMERID
JOIN ORDERDETAILS ON ORDERS.ORDERID = ORDERDETAILS.ORDERID
WHERE EXISTS (
    SELECT 1
    FROM PRODUCTS
    WHERE PRODUCTS.PRODUCTID = ORDERDETAILS.PRODUCTID
    AND PRODUCTS.PRICE > 500
);

--12.Full Join with Grouping and Aggregation
SELECT 
    CUSTOMERS.CUSTOMERID,
    CUSTOMERS.CUSTOMERNAME,
    SUM(ORDERS.ORDERAMOUNT) AS TotalOrderAmount
FROM CUSTOMERS
FULL JOIN ORDERS ON CUSTOMERS.CUSTOMERID = ORDERS.CUSTOMERID
GROUP BY CUSTOMERS.CUSTOMERID, CUSTOMERS.CUSTOMERNAME;


--13.Non-Equi Join
SELECT 
    CUSTOMERS.CUSTOMERID,
    CUSTOMERS.CUSTOMERNAME,
    ORDERS.ORDERID,
    ORDERS.ORDERAMOUNT
FROM CUSTOMERS
JOIN ORDERS ON ORDERS.ORDERAMOUNT >= 250 AND ORDERS.ORDERAMOUNT < 500

--14.Inner Join with Derived Table
SELECT 
    CUSTOMERS.CUSTOMERID,
    CUSTOMERS.CUSTOMERNAME,
    COALESCE(TotalOrders.TotalOrderAmount, 0) AS TotalSpend
FROM CUSTOMERS
LEFT JOIN (
    SELECT 
        CUSTOMERID,
        SUM(ORDERAMOUNT) AS TotalOrderAmount
    FROM ORDERS
    GROUP BY CUSTOMERID
) AS TotalOrders
ON CUSTOMERS.CUSTOMERID = TotalOrders.CUSTOMERID;

--16.Anti-Join with NOT EXISTS
SELECT 
    CUSTOMERS.CUSTOMERID,
    CUSTOMERS.CUSTOMERNAME
FROM CUSTOMERS
WHERE NOT EXISTS (
    SELECT 1
    FROM ORDERS
    JOIN ORDERDETAILS ON ORDERS.ORDERID = ORDERDETAILS.ORDERID
    JOIN PRODUCTS ON ORDERDETAILS.PRODUCTID = PRODUCTS.PRODUCTID
    WHERE ORDERS.CUSTOMERID = CUSTOMERS.CUSTOMERID
    AND PRODUCTS.PRICE > 700
);


--17.Joining on Multiple Columns
SELECT 
    ORDERS.ORDERID,
    ORDERS.ORDERAMOUNT,
    ORDERS.ORDERDATE,
    CUSTOMERS.CUSTOMERID,
    CUSTOMERS.CUSTOMERNAME,
    CUSTOMERS.CITY
FROM ORDERS
JOIN CUSTOMERS ON ORDERS.CUSTOMERID = CUSTOMERS.CUSTOMERID
JOIN CUSTOMERS AS OTHER_CUSTOMERS 
    ON CUSTOMERS.CITY = OTHER_CUSTOMERS.CITY 
    AND CUSTOMERS.CUSTOMERID != OTHER_CUSTOMERS.CUSTOMERID
WHERE ORDERS.CUSTOMERID = OTHER_CUSTOMERS.CUSTOMERID;


